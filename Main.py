class Literal:
    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        return isinstance(other, Literal) and self.name == other.name
        # return isinstance(other, Not) and self.name == other.literal

    def __str__(self):
        return self.name

    def __repr__(self):
        return str(self)

    def __hash__(self):
        return hash(self.name)


class Not:
    def __init__(self, literal):
        self.literal = literal

        # if isinstance(literal, Not):
        #     self.literal = literal.literal
        # else:
        #     self.literal = literal

    def __str__(self):
        return f"¬¨{self.literal}"

    def __eq__(self, other):
        if isinstance(other, Not):
            return self.literal == other.literal

        return isinstance(other, Not) and self.literal.name == other.literal.name
        # return isinstance(other, Literal) and self.literal == other.name

    def __repr__(self):
        return str(self)

    def __hash__(self):
        return hash(("¬¨", self.literal))


class And:
    def __init__(self, *args):
        self.args = args

    def __str__(self):
        return f"({' ‚àß '.join(map(str, self.args))})"

    def __iter__(self):
        for arg in self.args:
            if isinstance(arg, (And, Or)):
                yield from arg
            else:
                yield arg



class Or:
    def __init__(self, *args):
        self.args = args

    def __str__(self):
        return f"({' ‚à® '.join(map(str, self.args))})"

    def __iter__(self):
        for arg in self.args:
            if isinstance(arg, (And, Or)):
                yield from arg
            else:
                yield arg


class Resolution:
    def __init__(self, formula):
        self.formula = formula
        # self.theorem = Or(*[Not(literal) for literal in (theorem if isinstance(theorem, (list, tuple)) else [theorem])])
        # self.theorem = Or(*[Not(literal) for literal in ([theorem] if isinstance(theorem, Literal) or isinstance(theorem, Not) else theorem)])
        # self.formula.append(self.theorem)

    def resolve(self):
        formula = to_cnf(self.formula)
        disjunction_set = to_disjunction_set(formula)
        print(disjunction_set)
        while True:
            new = set()

            for i, clause1 in enumerate(disjunction_set):
                for j, clause2 in enumerate(disjunction_set):
                    if i >= j:
                        continue

                    resolvent = resolve(clause1, clause2)
                    if resolvent is not None:
                        new.add(tuple(resolvent))

            print(new)
            filtered_disjunction_set = [
                [item for item in sublist if all(item not in pair for pair in new)]
                for sublist in disjunction_set
            ]

            print(filtered_disjunction_set)

            for item in filtered_disjunction_set:
                if item != []:
                    return False

            return True

    def __str__(self):
        return f'({self.formula})'


def to_cnf(expr):
    if isinstance(expr, And):
        # –Ø–∫—â–æ —Ü–µ And, –∑–≤–æ–¥–∏–º–æ –∫–æ–∂–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ –ö–ù–§
        return And(*[to_cnf(arg) for arg in expr.args])

    elif isinstance(expr, Or):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Or —Ö–æ—á–∞ –± –æ–¥–∏–Ω And
        for arg in expr.args:
            if isinstance(arg, And):
                # –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–Ω–∏–π –∑–∞–∫–æ–Ω: A ‚à® (B ‚àß C) ‚Üí (A ‚à® B) ‚àß (A ‚à® C)
                i = expr.args.index(arg)
                new_clauses = [Or(*[to_cnf(sub), *(expr.args[:i] + expr.args[i + 1:])]) for sub in arg.args]
                return to_cnf(And(*new_clauses))

        # üîπ –û—á–∏—â—É—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ Or –ø–µ—Ä–µ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º
        new_args = []
        for arg in expr.args:
            if isinstance(arg, Or):  # –Ø–∫—â–æ —Ü–µ Or(A, B), —Ç–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ
                new_args.extend(arg.args)
            else:
                new_args.append(arg)

        return Or(*new_args)

    # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –ª—ñ—Ç–µ—Ä–∞–ª, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    else:
        return expr



def to_disjunction_set(expression):
    disjunction_set = []

    def extract_literals(expr):
        if isinstance(expr, Or):
            return [lit for sub in expr.args for lit in extract_literals(sub)]
        elif isinstance(expr, And):
            flattened = []
            for sub in expr.args:
                sub_literals = extract_literals(sub)
                if isinstance(sub_literals[0], list):  # –Ø–∫—â–æ –≤–∫–ª–∞–¥–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫, —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ
                    flattened.extend(sub_literals)
                else:
                    flattened.append(sub_literals)
            return flattened
        else:
            return [expr]

    if isinstance(expression, And):
        for sub_expr in expression.args:
            literals = extract_literals(sub_expr)
            if isinstance(literals[0], list):  # –£–Ω–∏–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ
                disjunction_set.extend(literals)
            else:
                disjunction_set.append(literals)
    elif isinstance(expression, Or):
        disjunction_set.append(extract_literals(expression))
    else:
        disjunction_set.append([expression])

    return disjunction_set




def resolve(clause1, clause2):
    """
    –í–∏–∫–æ–Ω—É—î —Ä–µ–∑–æ–ª—é—Ü—ñ—é –º—ñ–∂ –¥–≤–æ–º–∞ –¥–∏–∑'—é–Ω–∫—Ç–∞–º–∏ clause1 —Ç–∞ clause2.
    –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –¥–∏–∑'—é–Ω–∫—Ç –∞–±–æ None, —è–∫—â–æ —Ä–µ–∑–æ–ª—é—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞.
    """

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –Ω–∞ —Å–ø–∏—Å–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —î —ñ—Ç–µ—Ä–∞–±–µ–ª—å–Ω–∏–º–∏
    clause1 = clause1 if isinstance(clause1, (list, set)) else [clause1]
    clause2 = clause2 if isinstance(clause2, (list, set)) else [clause2]

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—É–ø–µ—Ä–µ—á–ª–∏–≤—ñ –ª—ñ—Ç–µ—Ä–∞–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Rain —Ç–∞ ¬¨Rain)

    new_clause = []
    resolved = False

    for lit1 in clause1:
        for lit2 in clause2:
            if lit1 == Not(lit2) or Not(lit1) == lit2:
                return [lit1, lit2]
            else:
                new_clause.append(lit1)  # –î–æ–¥–∞—î–º–æ –ª—ñ—Ç–µ—Ä–∞–ª–∏ –±–µ–∑ —Å—É–ø–µ—Ä–µ—á–Ω–æ—Å—Ç–µ–π

    return None  # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Å—É–ø–µ—Ä–µ—á–ª–∏–≤–∏—Ö –ø–∞—Ä, —Ä–µ–∑–æ–ª—é—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞